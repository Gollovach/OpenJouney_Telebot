import telebot
import http.client
import json
from telebot import types
'''
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ json –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å–∫–æ–ª—å–∫—É OpenJourney
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ, 
–∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—É –≤ API –∏–ª–∏ URL.
–ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥, —è —Å–æ–≤–µ—Ç—É—é –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
----------------------------------------------------------------------------------------------------
The json library is used to verify the received data, since OpenJourney
sends only encoded data, which will produce an error
that you can count as an error in the API or URL.
If you are going to supplement the code, I advise you to familiarize yourself with the documentation
'''
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# Initializing the bot
bot = telebot.TeleBot('Bot_token')

# –ù–æ–≤—ã–π –∫–ª—é—á API –¥–ª—è RapidAPI (OpenJourney)
# New API key for RapidAPI (OpenJourney)
RAPIDAPI_KEY = "Rapid_key"

# –ù–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenJourney —á–µ—Ä–µ–∑ RapidAPI
# New URL for requests to OpenJourney via RapidAPI
OPENJOURNEY_API_URL = "/models/stabilityai/stable-diffusion-xl-base-1.0"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenJourney API (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º http.client)
# Function for creating an image via the OpenJourney API (using http.client)
def generate_image(prompt):
    conn = http.client.HTTPSConnection("openjourney1.p.rapidapi.com")

    payload = json.dumps({
        "inputs": prompt
    })

    headers = {
        'X-RapidAPI-Key': RAPIDAPI_KEY,
        'X-RapidAPI-Host': "openjourney1.p.rapidapi.com",
        'Content-Type': "application/json"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # Sending a request to create an image
    try:
        conn.request("POST", OPENJOURNEY_API_URL, payload, headers)

        res = conn.getresponse()
        data = res.read()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        # We log the response for diagnosis
        print(f"–û—Ç–≤–µ—Ç –æ—Ç API: {data[:100]}...")  # –ü–µ—á–∞—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö)
        # Trying to figure out what the API returns (for example, checking the data type)
        if res.getheader('Content-Type') == 'application/json':
            # –ï—Å–ª–∏ —ç—Ç–æ JSON, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            # If it is JSON, then we process it as a normal response
            response_json = json.loads(data.decode("utf-8"))
            if "outputs" in response_json:
                return response_json["outputs"][0]
            else:
                print("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
                return None
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, —Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # If it's not JSON, then we assume it's an image
            return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è / Returning binary image data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# Handler of the /start command
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é OpenJourney!", reply_markup=markup)

# –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
# Start of the image creation process
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É')
        btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞')
        btn3 = types.KeyboardButton('API OpenJourney')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup)

    elif message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # Requesting which request the user wants for the image
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—á–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º, —Ç–µ–º –ª—É—á—à–µ)', parse_mode='Markdown')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        # Saving the user's state that he has started the generation process
        bot.register_next_step_handler(message, handle_image_request)

    elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞':
        bot.send_message(message.from_user.id, '–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: ...')

    elif message.text == 'API OpenJourney':
        bot.send_message(message.from_user.id, '–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://rapidapi.com/openjourney)', parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# Processing a text request to generate an image
def handle_image_request(message):
    prompt = message.text

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    # Image generation
    bot.send_message(message.from_user.id, "üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    result = generate_image(prompt)

    if result:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            # If this is an image, we send it
            if isinstance(result, bytes):
                bot.send_photo(message.from_user.id, result)
                bot.send_message(message.from_user.id, "üéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            else:
                bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# Launching the bot
bot.polling(none_stop=True, interval=0)
